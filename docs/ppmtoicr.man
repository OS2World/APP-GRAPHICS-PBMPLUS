

ppmtoicr(1)                Unix Programmer's Manual                ppmtoicr(1)


NNNAAAMMMEEE
     ppmtoicr - convert a portable pixmap into NCSA ICR format

SSSYYYNNNOOOPPPSSSIIISSS
     ppppppmmmtttoooiiicccrrr [-wwwiiinnndddooowwwnnnaaammmeee _n_a_m_e] [-eeexxxpppaaannnddd _e_x_p_a_n_d]  [-dddiiisssppplllaaayyy  _d_i_s_p_l_a_y]  [-rrrllleee]
     [_p_p_m_f_i_l_e]

DDDEEESSSCCCRRRIIIPPPTTTIIIOOONNN
     Reads  a  portable  pixmap  file  as  input.   Produces  an  NCSA  Telnet
     Interactive  Color  Raster  graphic  file  as  output.  If _p_p_m_f_i_l_e is not
     supplied, _p_p_m_t_o_i_c_r will read from standard input.

     Interactive Color Raster  (ICR)  is  a  protocol  for  displaying  raster
     graphics  on  workstation  screens.  The  protocol is implemented in NCSA
     Telnet  for  the  Macintosh  version  2.3.  The   ICR   protocol   shares
     characteristics  of  the  Tektronix graphics terminal emulation protocol.
     For example, escape sequences are used to control the display.

     _p_p_m_t_o_i_c_r will output the appropriate sequences to create a window of  the
     dimensions  of the input pixmap, create a colormap of up to 256 colors on
     the display, then load the picture data into the window.

     Note that there is no icrtoppm tool - this transformation is one way.

OOOPPPTTTIIIOOONNNSSS

     ---wwwiiinnndddooowwwnnnaaammmeee _n_a_m_e
                   Output will be displayed in _n_a_m_e (Default is to use _p_p_m_f_i_l_e
                   or "untitled" if standard input is read.)

     ---eeexxxpppaaannnddd _e_x_p_a_n_d
                   Output will be expanded on display by  factor  _e_x_p_a_n_d  (For
                   example,  a  value  of  2  will  cause  four  pixels  to be
                   displayed for every input pixel.)

     ---dddiiisssppplllaaayyy _d_i_s_p_l_a_y
                   Output will be displayed on screen numbered _d_i_s_p_l_a_y

     ---rrrllleee          Use run-length  encoded  format  for  display.  (This  will
                   nearly always result in a quicker display, but may skew the
                   colormap.)

EEEXXXAAAMMMPPPLLLEEESSS
     To display a _p_p_m file using the protocol:
         ppmtoicr ppmfile
     This will create a window named _p_p_m_f_i_l_e on the display with  the  correct
     dimensions  for  _p_p_m_f_i_l_e,  create  and  download  a colormap of up to 256
     colors, and download the picture into the window. The same effect may  be
     achieved by the following sequence:
         ppmtoicr ppmfile > filename
         cat filename
     To display a GIF file using the protocol in a  window  titled  after  the
     input  file,  zoom  the  displayed image by a factor of 2, and run-length
     encode the data:
         giftoppm giffile | ppmtoicr -w giffile -r -e 2
     _p_p_m_t_o_i_c_r will also read  _p_b_m  and  _p_g_m  files.  The  full  range  of  pbm


                                30 July 1990                                 1




ppmtoicr(1)                Unix Programmer's Manual                ppmtoicr(1)


     manipulation routines may  be  applied  to  graphics  for  display  using
     _p_p_m_t_o_i_c_r.  Thus,  a  monochrome  Sun raster file may be viewed in 5 color
     grayscale by the following sequence:
         pnmtorast rasterfile | pnmscale .5 | ppmtoicr

BBBUUUGGGSSS

     The protocol uses frequent _f_f_l_u_s_h calls  to  speed  up  display.  If  the
     output is saved to a file for later display via _c_a_t, drawing will be much
     slower. In either case, increasing the Blocksize  limit  on  the  display
     will speed up transmission substantially.

SSSEEEEEE AAALLLSSSOOO
     ppppppmmm(((555)))

     _N_C_S_A _T_e_l_n_e_t _f_o_r _t_h_e _M_a_c_i_n_t_o_s_h, University of Illinois at Urbana-Champaign
     (1989)

AAAUUUTTTHHHOOORRR
     Copyright (C) 1990 by Kanthan Pillay (svpillay@Princeton.EDU),  Princeton
     University Computing and Information Technology.





































                                30 July 1990                                 2


