

pnmshear(1)                Unix Programmer's Manual                pnmshear(1)


NNNAAAMMMEEE
     pnmshear - shear a portable anymap by some angle

SSSYYYNNNOOOPPPSSSIIISSS
     pppnnnmmmssshhheeeaaarrr [-nnnoooaaannntttiiiaaallliiiaaasss] _a_n_g_l_e [_p_n_m_f_i_l_e]

DDDEEESSSCCCRRRIIIPPPTTTIIIOOONNN
     Reads a portable anymap as input.  Shears it by the specified  angle  and
     produces a portable anymap as output.  If the input file is in color, the
     output will be too, otherwise it will be  grayscale.   The  angle  is  in
     degrees (floating point), and measures this:
         +-------+  +-------+
         |       |  |\       \
         |  OLD  |  | \  NEW  \
         |       |  |an\       \
         +-------+  |gle+-------+
     If the angle is negative, it shears the other way:
         +-------+  |-an+-------+
         |       |  |gl/       /
         |  OLD  |  |e/  NEW  /
         |       |  |/       /
         +-------+  +-------+
     The angle should not get too close to 90 or -90, or the resulting  anymap
     will be unreasonably wide.

     The shearing is  implemented  by  looping  over  the  source  pixels  and
     distributing  fractions  to  each of the destination pixels.  This has an
     "anti-aliasing" effect - it avoids jagged edges  and  similar  artifacts.
     However,  it  also  means  that the original colors or gray levels in the
     image are modified.  If you need  to  keep  precisely  the  same  set  of
     colors,  you  can  use  the ---nnnoooaaannntttiiiaaallliiiaaasss flag.  This does the shearing by
     moving pixels without changing their values.  If you  want  anti-aliasing
     and  don't  care  about  the  precise  colors,  but  still need a limited
     *number* of colors, you can run the result through _p_p_m_q_u_a_n_t.

     All flags can be abbreviated to their shortest unique prefix.

SSSEEEEEE AAALLLSSSOOO
     pnmrotate(1), pnmflip(1), pnm(5), ppmquant(1)

AAAUUUTTTHHHOOORRR
     Copyright (C) 1989, 1991 by Jef Poskanzer.
















                               12 January 1991                               1


